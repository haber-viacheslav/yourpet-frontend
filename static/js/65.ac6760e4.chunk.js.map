{"version":3,"file":"static/js/65.ac6760e4.chunk.js","mappings":"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","sources":["components/RegisterForm/RegisterForm.styled.jsx","components/RegisterForm/RegisterForm.jsx","pages/RegisterPage.jsx"],"sourcesContent":["import styled from 'styled-components';\nimport { NavLink } from 'react-router-dom';\nimport { theme } from '../../theme/theme';\nimport { Form, Field } from 'formik';\n\nexport const Wrapper = styled.div`\n  margin-left: auto;\n  margin-right: auto;\n  margin-top: 80px;\n  width: 280px;\n  box-shadow: 3px 8px 14px rgba(136, 198, 253, 0.19);\n  border-radius: 40px;\n  background-color: #ffffff;\n  padding: 40px 12px;\n\n  @media screen and (min-width: 768px) {\n    width: 608px;\n    padding: 60px 75px;\n  }\n`;\n\nexport const RegisterFormStyled = styled(Form)`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n`;\n\nexport const Box = styled.div`\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  gap: 24px;\n  width: 100%;\n  margin-top: 40px;\n  margin-bottom: 40px;\n\n  @media screen and (min-width: 768px) {\n    gap: 32px;\n    margin-bottom: 52px;\n  }\n  @media screen and (min-width: 1280px) {\n    margin-bottom: 40px;\n  }\n`;\n\nexport const Title = styled.h2`\n  font-family: ${theme.fonts.main};\n  font-style: normal;\n  font-weight: ${theme.fontWeights.medium};\n  font-size: 24px;\n  line-height: 33px;\n  display: flex;\n  align-items: center;\n  text-align: center;\n  color: #111111;\n\n  @media screen and (min-width: 768px) {\n    font-weight: 500;\n    font-size: 36px;\n    line-height: 49px;\n  }\n`;\n\nexport const Input = styled(Field)`\n  display: block;\n  margin-left: auto;\n  margin-right: auto;\n  font-family: ${theme.fonts.main};\n  font-style: normal;\n  font-weight: ${theme.fontWeights.regular};\n  height: 48px;\n  font-size: 16px;\n  padding: 12px 16px;\n  width: 100%;\n  border: 1px solid #54adff;\n  border-color: ${props => (props.error ? props.theme.colors.red  : props.theme.colors.blue)};\n  border-radius: 40px;\n  cursor: pointer;\n  outline: none;\n`;\n\nexport const Button = styled.button`\n  display: block;\n  margin-left: auto;\n  margin-right: auto;\n  font-family: 'Manrope';\n  font-style: normal;\n  font-weight: 400;\n  font-size: 16px;\n  width: 100%;\n  border: none;\n  border-radius: 40px;\n  height: 48px;\n  cursor: pointer;\n  background: #54adff;\n  margin-bottom: 24px;\n  color: #ffffff;\n\n  @media screen and (min-width: 768px) {\n    margin-bottom: 16px;\n  }\n`;\n\nexport const Text = styled.p`\n  font-family: ${theme.fonts.main};\n  font-style: normal;\n  font-weight: ${theme.fontWeights.regular};\n  font-size: 12px;\n  line-height: 16px;\n  letter-spacing: 0.04em;\n  color: #888888;\n`;\n\nexport const Span = styled.span`\n  margin-left: 3px;\n`;\n\nexport const Link = styled(NavLink)`\n  color: #54adff;\n  line-height: 16px;\n`;\n\nexport const IconSpan = styled.span`\n  position: absolute;\n  cursor: pointer;\n  top: 86px;\n  right: 15px;\n  @media screen and (min-width: 768px) {\n    top: 92px;\n  }\n`;\nexport const IconSpan1 = styled.span`\n  position: absolute;\n  cursor: pointer;\n  top: 156px;\n  right: 15px;\n  @media screen and (min-width: 768px) {\n    top: 172px;\n  }\n`;\n\nexport const SVG = styled.svg`\n  display: block;\n  fill: transparent;\n  stroke: #54adff;\n`;\n\nexport const EmailMessage = styled.div`\n position: absolute;\n  font-family: 'Manrope';\n  font-style: normal;\n  font-weight: 400;\n  font-size: 12px;\n  line-height: 16px;\n color: #F43F5E;\n  top: 50px;\n  left: 16px;\n`;\n\nexport const PasswordMessage = styled.div`\n position: absolute;\n  font-family: 'Manrope';\n  font-style: normal;\n  font-weight: 400;\n  font-size: 12px;\n  line-height: 16px;\n color: #F43F5E;\n   top: 123px;\n  left: 16px;\n @media screen and (min-width: 768px) {\n    top: 130px;\n  left: 16px;\n  }\n\n`;\n\nexport const ConfirmMessage = styled.div`\n position: absolute;\n  font-family: 'Manrope';\n  font-style: normal;\n  font-weight: 400;\n  font-size: 12px;\n  line-height: 16px;\n color: #F43F5E;\n  top: 195px;\n  left: 16px;\n  @media screen and (min-width: 768px) {\n    top: 210px;\n\n  }\n`;","import React from 'react';\nimport { useState } from 'react';\nimport { Formik, ErrorMessage } from 'formik';\nimport { string, object, ref } from 'yup';\nimport {\n  Wrapper,\n  RegisterFormStyled,\n  IconSpan,\n  IconSpan1,\n  SVG,\n  EmailMessage,\n  PasswordMessage,\n  ConfirmMessage,\n  Input,\n  Title,\n  Box,\n  Button,\n  Text,\n  Span,\n  Link,\n} from './RegisterForm.styled';\nimport icons from 'images/icons.svg';\n\nconst iconClose = () => {\n  return (\n    <SVG width={24} height={24}>\n      <use href={icons + '#icon-eye-closed'}></use>\n    </SVG>\n  );\n};\n\nconst iconOpen = () => {\n  return (\n    <SVG width={24} height={24}>\n      <use href={icons + '#icon-eye-open'}></use>\n    </SVG>\n  );\n};\n\nexport const RegisterForm = () => {\n  const [toggleIconPass, setToggleIconPass] = useState(iconClose);\n  const [typePass, setTypePass] = useState('password');\n  const [toggleIconConfirm, setToggleIconConfirm] = useState(iconClose);\n  const [typeCofirm, setTypeCofirm] = useState('password');\n\n  const yupRegisterValidation = object().shape({\n    email: string().email('Enter a Valid Email').required('Email is Required'),\n    password: string()\n      .required('Enter Your Password')\n      .min(8, 'Password Should be minimum 8 character')\n      .max(50, 'Too long'),\n    confirm: string()\n      .oneOf([ref('password')], 'Password does not matched')\n      .required('Confirm Password is Required'),\n  });\n\n  const initialValues = {\n    email: '',\n    password: '',\n    confirm: '',\n  };\n\n  const handleSubmit = (values, { resetForm }) => {\n    console.log(values);\n    // console.log(actions);\n    resetForm();\n  };\n\n  const togglePassInput = e => {\n    if (typePass === 'password') {\n      setTypePass('text');\n      setToggleIconPass(iconOpen);\n    } else {\n      setTypePass('password');\n      setToggleIconPass(iconClose);\n    }\n  };\n\n  const toggleConfirmInput = e => {\n    if (typeCofirm === 'password') {\n      setTypeCofirm('text');\n      setToggleIconConfirm(iconOpen);\n    } else {\n      setTypeCofirm('password');\n      setToggleIconConfirm(iconClose);\n    }\n  };\n\n  return (\n    <Wrapper>\n      <Formik\n        initialValues={initialValues}\n        validationSchema={yupRegisterValidation}\n        onSubmit={handleSubmit}\n      >\n        {({ errors, touched }) => (\n          <RegisterFormStyled autoComplete=\"off\">\n            <Title>Registation</Title>\n            <Box>\n              <Input\n                type=\"text\"\n                name=\"email\"\n                placeholder=\"Email\"\n                error={errors.email && touched.email && 'false'}\n              />\n              <ErrorMessage\n                name=\"email\"\n                type=\"email\"\n                id=\"email\"\n                render={msg => <EmailMessage>{msg}</EmailMessage>}\n              />\n              <Input\n                type={typePass}\n                id=\"password\"\n                name=\"password\"\n                placeholder=\"Password\"\n                error={errors.password && touched.password && 'false' }\n              />\n              <ErrorMessage\n                name=\"password\"\n                type=\"password\"\n                render={password => (\n                  <PasswordMessage>{password}</PasswordMessage>\n                )}\n              />\n              <IconSpan onClick={togglePassInput}>{toggleIconPass}</IconSpan>\n              <ErrorMessage\n                name=\"confirm\"\n                type=\"confirm\"\n                render={msg => <ConfirmMessage>{msg}</ConfirmMessage>}\n              />\n              <Input\n                type={typeCofirm}\n                name=\"confirm\"\n                id=\"confirm\"\n                placeholder=\"Confirm password\"\n                error={errors.confirm && touched.confirm && 'false'}\n              />\n              <IconSpan1 onClick={toggleConfirmInput}>\n                {toggleIconConfirm}\n              </IconSpan1>\n            </Box>\n            <Button type=\"submit\">Registation</Button>\n            <Text>\n              Already have an account?\n              <Span>\n                <Link to=\"/login\">Login</Link>\n              </Span>\n            </Text>\n          </RegisterFormStyled>\n        )}\n      </Formik>\n    </Wrapper>\n  );\n};\n","import {RegisterForm} from '../components/RegisterForm/RegisterForm'\n\nconst RegisterPage = () => {\n  return (\n    <>\n      <RegisterForm/>\n    </>\n  );\n};\nexport default RegisterPage;\n"],"names":["Wrapper","styled","_templateObject","_taggedTemplateLiteral","RegisterFormStyled","Form","_templateObject2","Box","_templateObject3","Title","_templateObject4","theme","Input","Field","_templateObject5","props","error","colors","red","blue","Button","_templateObject6","Text","_templateObject7","Span","_templateObject8","Link","NavLink","_templateObject9","IconSpan","_templateObject10","IconSpan1","_templateObject11","SVG","_templateObject12","EmailMessage","_templateObject13","PasswordMessage","_templateObject14","ConfirmMessage","_templateObject15","iconClose","_jsx","width","height","children","href","icons","iconOpen","RegisterForm","_useState","useState","_useState2","_slicedToArray","toggleIconPass","setToggleIconPass","_useState3","_useState4","typePass","setTypePass","_useState5","_useState6","toggleIconConfirm","setToggleIconConfirm","_useState7","_useState8","typeCofirm","setTypeCofirm","yupRegisterValidation","object","shape","email","string","required","password","min","max","confirm","oneOf","ref","togglePassInput","e","toggleConfirmInput","Formik","initialValues","validationSchema","onSubmit","values","_ref","resetForm","console","log","_ref2","errors","touched","_jsxs","autoComplete","type","name","placeholder","ErrorMessage","id","render","msg","onClick","to","_Fragment"],"sourceRoot":""}